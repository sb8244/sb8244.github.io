<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen Bussey's Software Engineering Blog</title>
  <id>https://stephenbussey.com</id>
  <link href="https://stephenbussey.com"/>
  <link href="https://stephenbussey.com/feed.xml" rel="self"/>
  <updated>2018-01-07T21:47:00-05:00</updated>
  <author>
    <name>Stephen Bussey</name>
  </author>
  <entry>
    <title>Designing Elixir Supervisor Trees</title>
    <link rel="alternate" href="https://stephenbussey.com/2018/01/08/designing-elixir-supervisor-trees.html"/>
    <id>https://stephenbussey.com/2018/01/08/designing-elixir-supervisor-trees.html</id>
    <published>2018-01-07T21:47:00-05:00</published>
    <updated>2018-01-07T22:38:03-05:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;Over the past year, I&amp;rsquo;ve been getting more and more into Elixir. The language and
paradigm has shifted how I think about coding in Ruby and has been incredibly &lt;em&gt;fun&lt;/em&gt;
to work with. One of the core concepts of an Elixir application is the supervision tree.
Let&amp;rsquo;s dive into some patterns that I typically use, along with some real code.&lt;/p&gt;

&lt;h2&gt;Supervisors and Processes&lt;/h2&gt;

&lt;p&gt;A process in Elixir is an isolated unit of execution. Processes have their own stack,
&amp;ldquo;run queue&amp;rdquo;, and garbage collection. Because of this level of isolation, it helps to think
of them as small programs that can talk to other small programs in an application. Processes
are crucial for storing and accessing dynamic data, as well as for implementing transformations
around data. A process executes all operations in its run queue sequentially, but multiple
run queues can execute concurrently (leading to true concurrency). If you are curious about this
specifically, I find
Hamidreza Soleimani&amp;rsquo;s &lt;a href="https://hamidreza-s.github.io/erlang/scheduling/real-time/preemptive/migration/2016/02/09/erlang-scheduler-details.html" target="_blank"&gt;blog post&lt;/a&gt;
fascinating.&lt;/p&gt;

&lt;p&gt;A supervisor is a process that manages the lifecycles of child processes. This most often
comes through as a fault tolerance mechanism. If a process crashes, the parent supervisor
can choose to restart it, let it stay dead, restart it and all peers, etc. A supervisor
can supervise other supervisors, which leads to a supervision tree.&lt;/p&gt;

&lt;h2&gt;Modeling a Problem&lt;/h2&gt;

&lt;p&gt;The problem that I&amp;rsquo;m going to discuss today is the model of a game server for the game
generals.io. This is a turn-based &amp;ldquo;real-time&amp;rdquo; strategy game that involves capturing towns
with armies and overtaking the enemy generals. Users can queue up moves to execute sequentially
over turns. This allows complex moves to be planned out and executed without losing time.&lt;/p&gt;

&lt;p&gt;In this problem, there are a few concepts that stick out to me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Board: A board is the representation of what the current state of the game is. This would
include the cell types, the state of the armies, the fog of war, etc&lt;/li&gt;
&lt;li&gt;Command queue: This stores the entire set of commands for the game. It is write-ahead and
knows what commands have been executed and which are in the future (and on which turn)&lt;/li&gt;
&lt;li&gt;Player list: Not as obvious as the others, but we need to know what players are in a game,
and what the mapping is to their login&lt;/li&gt;
&lt;li&gt;Game: The game contains all of the above things and ticks every so often, progressing the
gameplay along&lt;/li&gt;
&lt;li&gt;Game list: Building an online game requires supporting multiple games at once&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m going to walk through each of these concepts (in order) and explain the approach I
took in implementing the supervision tree. First, let&amp;rsquo;s see what that supervision tree
might look like.&lt;/p&gt;

&lt;h2&gt;Supervision Tree for Our Game&lt;/h2&gt;

&lt;p&gt;What I&amp;rsquo;m about to present doesn&amp;rsquo;t come immediately (well, maybe with more practice),
and is something that came about through iterations and testing the waters with different
code. This is the final product, which I&amp;rsquo;ll go into more detail on. The [] syntax indicates
what the children are.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Application -&amp;gt; [GamesSupervisor, GameRegistry, WebEndpoint]
GamesSupervisor (1 child type) -&amp;gt; [GameSupervisor (dynamic)]
GameSupervisor (4 child type) -&amp;gt; [BoardServer, CommandQueueServer, TickServer, PlayerServer]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;BoardServer &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/board_server.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;When building the game, I started with the board object and naturally progressed into
the BoardServer. I feel that starting on the inner nodes of the supervisor can make
it more obvious what the next steps are, rather than trying to plan out everything
at once.&lt;/p&gt;

&lt;p&gt;Notes on the code:&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve found myself trying to keep servers as simple as possible,
and executing complex logic in plain old modules which don&amp;rsquo;t have any GenServer
capability. When looking at the BoardServer, I&amp;rsquo;m happy to see that there is no
real logic in it, other than turn + 1.&lt;/p&gt;

&lt;p&gt;Defining a simple interface is crucial for communication between GenServers. I&amp;rsquo;ve
found myself getting stuck in between more verbose interfaces in the past and always
regret whatever brought me there.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice that I don&amp;rsquo;t use any of the GenServer helpers to remove boiler plate.
I&amp;rsquo;ve found that keeping it to pure Elixir makes it easier to read in the long run,
and increases my consistency across projects.&lt;/p&gt;

&lt;h2&gt;CommandQueueServer &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/command_queue_server.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Following the theme of keeping GenServers simple, this one is even more simple.
When I&amp;rsquo;m dealing with a GenServer that really only touches one thing, like this one
dealing with a Queue implementation, I do like to reach for Agent. Using an Agent
removes the need to build a real GenServer implementation, and increases the
readability significantly.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t find myself reaching for an Agent often, and will pull it out to a regular
GenServer if it gets too complex.&lt;/p&gt;

&lt;h2&gt;PlayerServer &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/player_server.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is another simple Agent implementation that I feel like got a little bit sloppy.
This is due to the use of a Map rather than a custom data structure. To clean up
this code, I would look at extracting the Map behavior into a specific PlayerList
module.&lt;/p&gt;

&lt;h2&gt;TickServer &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/tick_server.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I love this TickServer. One of my favorite lines of code in Elixir has been:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Process.send_after(self(), :start_tick, timeout)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is going to send a message from one process to itself, but set for the future.
This allows creation of non-blocking (while the waiting is happening) GenServer implementations
that are implemented entirely using native Elixir concepts.&lt;/p&gt;

&lt;p&gt;Another interesting point here is that the TickServer accepts a &lt;code&gt;ticker_fn&lt;/code&gt; in the server
initialization. We&amp;rsquo;ll see this pop up in our GameServer later. I thought this technique was
really interesting (and was sort of surprised it worked). It works due to the fact that
a fn in Elixir can be passed around like any other variable, and Elixir is stateless which
means that the fn doesn&amp;rsquo;t get any context from where it is defined. Be warned, however, that
executing a fn in the TickServer is going to block the TickServer until that function
completes; it is not going to execute in the server that defined the fn.&lt;/p&gt;

&lt;h2&gt;GameSupervisor &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/game_supervisor.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;There&amp;rsquo;s a lot going on in this supervisor, so let&amp;rsquo;s take it slow and just look at a few
specific concepts.&lt;/p&gt;

&lt;p&gt;The first thing to point out is the use of Registry:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def start_link(opts = %{game_id: id}) do
  Supervisor.start_link(__MODULE__, opts, name: {:via, Registry, {get_registry_name(), id}})
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the Registry allows for a named dynamic lookup / uniqueness of a GenServer. The
supervisor is defined by the id passed in, which would prevent two games from ever sharing
the same id at the same time. As you can imagine, that would be bad. We can take advantage
of the uniqueness as well, because another GenServer that is started with this id will return
the pid in the start_link call. We&amp;rsquo;ll see this through in the GamesSupervisor below.&lt;/p&gt;

&lt;p&gt;Another useful code snippet is for looking up a process by type under a supervisor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defp find_child_type(sup_pid, type) do
  Enum.find(Supervisor.which_children(sup_pid), {nil, nil, nil, nil}, fn({mod, _pid, _type, _}) -&amp;gt;
    mod == type
  end) |&amp;gt; elem(1)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve begun putting this in a Utils namespace in my new projects, but the gist is simple.
By using the supervisor&amp;rsquo;s pid, we can list out all of its children and find the one
with a given type (or base it on other things). GameSupervisor only has 1 child of
each type, which makes this work well.&lt;/p&gt;

&lt;p&gt;Our trust &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/game_supervisor.ex#L76" target="_blank"&gt;ticker_fn&lt;/a&gt; is
defined in this GameSupervisor. The reason I took this approach is that the knowledge of how to tick
should belong to something separate from what the ticking behavior is. Looking at this now,
I would probably pull this code into another module since it&amp;rsquo;s so long.&lt;/p&gt;

&lt;h2&gt;GamesSupervisor &lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/game/games_supervisor.ex" target="_blank"&gt;[code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ve finally made it to the top of the supervision tree with the GamesSupervisor. This
supervisor takes advantage of the GameRegistry to provide game lookups:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def get_game(id, opts \\ []) do
  options = Keyword.merge([name: __MODULE__], opts)
  Supervisor.start_child(options[:name], [%{game_id: id}]) |&amp;gt; case do
    {:error, {:already_started, pid}} -&amp;gt; pid
    {:error, _} -&amp;gt; nil
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case, the GameSupervisor is identified by the id, which will return when
&lt;code&gt;{:error, {:already_started, pid}}&lt;/code&gt; is returned from the start_child call. I use
this pattern in nearly every dynamic supervisor that I&amp;rsquo;ve written. I do typically
implement start/get in the same method (starting if it doesn&amp;rsquo;t exist, getting if it does),
but I found that to not work well as creating a new game involves several complex
operations such as board generation.&lt;/p&gt;

&lt;h2&gt;Registry&lt;/h2&gt;

&lt;p&gt;If you use a Registry, you do need to start it as a process in your application. I
generally just include it at the top level of my
&lt;a href="https://github.com/sb8244/generals/blob/aaea0e672f5dc0ebe616f4558a2c5912dd590da0/lib/generals/application.ex#L9" target="_blank"&gt;Application module&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;One good sign that your supervision tree has come together well is a very simple
mounting of it onto your final Application. Writing &lt;code&gt;supervisor(Generals.GamesSupervisor, [])&lt;/code&gt;
seems like a very clean interface for interacting with my game supervision tree, and
I feel good about that.&lt;/p&gt;

&lt;p&gt;Another key thing to think of when writing your supervision tree is what can / will
execute concurrently. For instance, let&amp;rsquo;s say that your PlayerList is implemented in
the same GenServer as the Board. If you want to access the PlayerList to see who is
in a game, it would not be able to run concurrently with Board operations. By splitting
them up into separate GenServer implementations, they can execute concurrently (keep in
mind that Elixir automatically distributes across cores).&lt;/p&gt;

&lt;p&gt;I hope this helped or solidified GenServer concepts for you. Please feel free to reach out
with any cool tips or tricks.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Get Your Rails Out Of My Ruby - HTTP &amp; Controllers</title>
    <link rel="alternate" href="https://stephenbussey.com/2017/09/04/get-your-rails-out-of-my-ruby-http.html"/>
    <id>https://stephenbussey.com/2017/09/04/get-your-rails-out-of-my-ruby-http.html</id>
    <published>2017-09-04T14:33:00-04:00</published>
    <updated>2017-09-29T15:19:43-04:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;On Friday September 22 (2017), I&amp;rsquo;ll be presenting a talk at &lt;a href="http://connect.tech/" target="_blank"&gt;connect.tech&lt;/a&gt; conference entitled &amp;ldquo;Get Your
Rails out of My Ruby&amp;rdquo;. This talk is going to be looking at alternatives to writing Ruby code in a Rails application that don&amp;rsquo;t
involve doing everything the &amp;ldquo;Rails way.&amp;rdquo; This post and future posts leading up to the talk will look at certain common areas
where Rails is used; this post will be about controllers and your HTTP interface.&lt;/p&gt;

&lt;h2&gt;Rails Controllers - Benefits &amp;amp; Challenges&lt;/h2&gt;

&lt;p&gt;Rails has done so much for the Ruby community and is arguably the best collection of &amp;ldquo;getting started practices&amp;rdquo; that exists
for web development. Other frameworks are catching up to it, but it has been innovating in its own way to keep pace. Rails handles
creating a web interface gracefully and provides mechanisms to do it securely (versus rolling it all yourself from scratch).
ActionController, specifically, has a few large benefits (not an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clean interface to write routes and controllers quickly&lt;/li&gt;
&lt;li&gt;ActionController::Parameters for securely handling parameters, beyond a simple Hash&lt;/li&gt;
&lt;li&gt;Easy to use router&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these benefits, I&amp;rsquo;ve seen some challenges from relying on Rails for everything web-interface related:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The default use of controllers leads to web &amp;amp; application code coupled together tightly&lt;/li&gt;
&lt;li&gt;Many ways to achieve objectives, some better and some worse than others. How do you know what&amp;rsquo;s better when getting started?&lt;/li&gt;
&lt;li&gt;Router is flexible and will let you do things you maybe shouldn&amp;rsquo;t be (1 controller with many endpoints)&lt;/li&gt;
&lt;li&gt;Larger learning curve than may be necessary due to generic functionality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When getting started with a new application or product, these tradeoffs might be entirely acceptable, and I would argue that they
most likely are acceptable for a majority of use cases. However, these tradeoffs begin to appear less worth it as an application,
business, or customer base increases in size. Specifically, the tight coupling of web and application code.&lt;/p&gt;

&lt;h2&gt;Web / Application Coupling&lt;/h2&gt;

&lt;p&gt;Your app is not a web app; your app is more than that. Your application is solving problems for businesses or consumers. Your application
has a problem domain that isn&amp;rsquo;t just &amp;ldquo;the web.&amp;rdquo; When building your application, are you writing and communicating in your business&amp;rsquo;s
context, or in the context of &amp;ldquo;the web?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law" target="_blank"&gt;Conway&amp;rsquo;s law&lt;/a&gt; says that your application design will reflect the communication structure
of your business. This is due to the needs of individuals in the organization to communicate effectively with each other. Let&amp;rsquo;s look
at an example of how this might play out in application code:&lt;/p&gt;

&lt;p&gt;Your banking software is designed to support operations of the tellers for your bank branches. When customers come into the bank, they
submit &amp;ldquo;withdrawal slips&amp;rdquo; to the tellers, who process these slips and issue &amp;ldquo;money withdrawals&amp;rdquo; back to the customers. Your company has
codified this business process for the software written for the tellers, which is accessed via a web interface on their computers.
When designing the classes for this software, what are the &amp;ldquo;withdrawal slips&amp;rdquo; and &amp;ldquo;money withdrawals&amp;rdquo; called?&lt;/p&gt;

&lt;p&gt;In the &amp;ldquo;Rails way&amp;rdquo; mindset, these might end up being simple &amp;ldquo;Controller Actions&amp;rdquo; which produce &amp;ldquo;Views&amp;rdquo; viewed by the tellers.
The slips contents are passed around the controllers by &amp;ldquo;params&amp;rdquo;. The web application creeps into the code in this way,
naming concepts by Rails concepts rather than business domains. The web / application domains are now coupled with each other.&lt;/p&gt;

&lt;h2&gt;Problems with Coupling&lt;/h2&gt;

&lt;p&gt;Being real, this tight naming coupling isn&amp;rsquo;t going to cripple your app; you may not even notice side effects for a while. However,
slowly things might end up happening:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Engineers become unable to communicate in the organization without mentally translating concepts&lt;/li&gt;
&lt;li&gt;Engineers doing refactors are struggling to discover the business intents, as the business concepts are not obvious&lt;/li&gt;
&lt;li&gt;Tighter coupling has caused bugs in one section to propagate down to another section of code, causing worse problems&lt;/li&gt;
&lt;li&gt;No mapping of language was ever created, people aren&amp;rsquo;t sure of the mapping anymore&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these problems are going to escalate to the business level at some point, they aren&amp;rsquo;t simply engineering issues. Particularly
decreased productivity and large refactors to reduce coupling.&lt;/p&gt;

&lt;div style="text-align: center"&gt;
  &lt;img src="/images/get-your-rails-out/traditional-design.png" alt="traditional rails coupling, large seam" /&gt;
  &lt;div&gt;
    &lt;small&gt;
      &lt;i&gt;Example of Rails design that introduces a high degree of coupling&lt;/i&gt;
    &lt;/small&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the above image, a traditional Rails Way design is shown. Rails routes the request to a controller, which utilizes service objects
to implement business logic. These service objects are tied to the controller if any business logic is implemented in the controller,
such as parameter defaults, safety checks, etc. It is possible to reduce coupling by making the controllers as dumb as possible, but
I&amp;rsquo;m not sure that this plays out as expected in the real world.&lt;/p&gt;

&lt;p&gt;In my view, the biggest issue with this design is that the application logic ends up tied in some way to a controller. This makes it
not possible to invoke the business logic without reading the controller, understanding it, and duplicating that setup somewhere else.
This introduces the above issues, such as lack of clear understanding, tight coupling, and more difficult refactors.&lt;/p&gt;

&lt;h2&gt;A different way?&lt;/h2&gt;

&lt;p&gt;What if our business logic was able to be separated from the web logic via object separation. This is fairly common in the Rails
world with the introduction of &amp;ldquo;service objects.&amp;rdquo; These objects are wrappers to encapsulate behavior. Instead of the &amp;ldquo;withdrawal slip&amp;rdquo;
being represented by the &lt;code&gt;params&lt;/code&gt; of a &lt;code&gt;Request&lt;/code&gt;, perhaps there is a &lt;code&gt;WithdrawalSlip&lt;/code&gt; object which has codified that business concept.
The controller will then create a &lt;code&gt;WithdrawalSlip&lt;/code&gt; and process it via a &lt;code&gt;MoneyWithdrawalProcess&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This small alternative immediately provides some benefits to the engineers and organization. The concepts are apparent in the code,
and the engineering team is able to make sense of the names compared to how the business operates. The changes allows the codebase
to get further, but there are still some problems. Every endpoint for the banking interface now has to create and manage respective
objects, and construct results into responses for the tellers. The interface has become less Rails specific, but actual functionality
is still heavily reliant on Rails. This means that engineers unfamiliar with the codebase (new hires) may end up doing something
The Rails Way rather than the way that has been established by the team, simply because it&amp;rsquo;s possible and they are not familiar with
the team&amp;rsquo;s way yet. This might lead to tension (&amp;ldquo;You only do it this way because you&amp;rsquo;re afraid of change!&amp;rdquo;) or code erosion over time,
neither of which are good.&lt;/p&gt;

&lt;h2&gt;Separating business logic completely away from the web logic&lt;/h2&gt;

&lt;p&gt;What if the web logic was completely separated from the business logic? I don&amp;rsquo;t mean the service object extraction mentioned previously,
but an actual fully operating application that doesn&amp;rsquo;t involve the web at all. This is possible to do, but involves separating the
two concepts and only combining them at very small seams.&lt;/p&gt;

&lt;p&gt;The actual development of the application logic is very specific to your use case, which makes it hard to offer suggestions on how
to achieve it. However, a general goal should be to have the entire application &amp;ldquo;runnable via CLI.&amp;rdquo; This creates an artificial goal
of not having code that is deeply integrated with being accessed via the web. Another artificial goal is that all tests for the
application should not involve the web at all. There are no &amp;ldquo;controllers&amp;rdquo; nor &amp;ldquo;actions&amp;rdquo; at this point, just your business logic.&lt;/p&gt;

&lt;p&gt;When this is achieved for the business logic, new development questions might be &amp;ldquo;how do we want to name and design this functionality?&amp;rdquo;,
rather than &amp;ldquo;how can I build this functionality in Rails?&amp;rdquo; Abstractions and patterns could be established in the code that aren&amp;rsquo;t
apparent otherwise, due to the artificial web limitations.&lt;/p&gt;

&lt;div style="text-align: center"&gt;
  &lt;img src="/images/get-your-rails-out/decoupled-design.png" alt="decoupled rails design, small seam" /&gt;
  &lt;div&gt;
    &lt;small&gt;
      &lt;i&gt;Example of Rails design that introduces a low degree of coupling&lt;/i&gt;
    &lt;/small&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the above example, a design is proposed that introduces a single seam between a controller (singular) and the application. This
design introduces a very low level of coupling, and the code that is coupled is generic code implemented for all endpoints. In practice,
I&amp;rsquo;ve found that this seam can be as low as three files: routing, request, response.&lt;/p&gt;

&lt;p&gt;The most significant advantage to this design is that the application is completely able to be executed independent of a web request,
maybe the business needs some CLI runners, or a fancy web socket based API. This design would make it possible to implement these
interfaces in a low number of files, without changing the application at all.&lt;/p&gt;

&lt;h2&gt;Creating a seam with Rails&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve made a lot of suggestions about taking your code away from Rails, so it seems that I should advise on how to create a seam
with Rails. Rails still solves a lot of problems that micro-frameworks like Sinatra just don&amp;rsquo;t solve. It&amp;rsquo;s also nice to be able to
use something that Rails provides when you really do need it. For these reasons, I would suggest creating the seam with Rails rather
than creating a seam to another framework. However, there is nothing so far that indicates you need to use Rails for web! Your
entire business logic is represented without Rails web code present, and could be accessed via any type of interface: Rails,
Sinatra, CLI, Websockets, etc.&lt;/p&gt;

&lt;p&gt;One way to interface with Rails is by defining routes in the router, pointed at some controller structure that you desire. A
&lt;a href="https://en.wikipedia.org/wiki/Front_controller" target="_blank"&gt;front controller&lt;/a&gt; becomes a viable choice here, as the single controller/action
creates a very small seam with the application. You could also still approach 1 action per endpoint, but your seam will be much
larger and could be prone to leaking through or being difficult to maintain.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at how you might approach the router:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/application.rb
# Setup your routes via a custom routes file that properly autoloads locally like routes.rb does
config.paths[&amp;quot;config/routes.rb&amp;quot;].unshift(Rails.root.join(&amp;quot;config&amp;quot;, &amp;quot;custom_routes.rb&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# config/routes.rb
# Integrate your routes via a context adapter
Rails.application.routes.draw do
  RailsAdapters::Routes.define_routes(self)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# lib/rails_adapters/routes.rb
# Define your routes on the context provided

class RailsAdapters::Routes
  def self.define_routes(context)
    new(MyRouter.instance).call(context)
  end

  def intialize(router)
    @router = router
  end

  def call(context)
    @router.routes.each do |route|
      # route.type =&amp;gt; :get | :post | :put | :delete
      # route.path =&amp;gt; &amp;quot;api/money_withdrawls/:id&amp;quot;
      options = { controller: &amp;quot;front&amp;quot;, action: &amp;quot;execute&amp;quot;, executor: route.executor }
      context.send route.type, route.path, options
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;# app/controllers/front_controller.rb
class FrontController &amp;lt; ApplicationController
  def execute # routing happened previously
    request = RailsAdapters::Request.new(self) # request adapter
    response = params[:executor].new(request).call # response adapter
    render json: response, status: response.status # RailsAdapters::Response.new(self).call(response) rather?
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The three steps I mentioned previously are visible here: routing, request, response.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;ve offered a way to define some routes in a separate place than the routes file. This may not seem great, as there is
not a ton of code, but that is the point! There doesn&amp;rsquo;t need to be a ton of code to create this seam with Rails. With a small
FrontController that can handle the clue between Rails request concepts and responses, we&amp;rsquo;re able to create lightweight adapters.
If we wanted to move this code to something like Sinatra, we would rewrite these adapters only, 0 business logic changes.&lt;/p&gt;

&lt;p&gt;One technique that can really help writing these adapters is the &amp;ldquo;context&amp;rdquo; concept above. By passing &lt;code&gt;self&lt;/code&gt; in as a parameter to
a method, every method on that context will be available in the consuming class. In this way, we could access &lt;code&gt;context.params&lt;/code&gt;,
&lt;code&gt;context.render&lt;/code&gt;, &lt;code&gt;context.get&lt;/code&gt;, etc. The code that is adapting can have full access to the Rails context, without necessarily
being tied to Rails.&lt;/p&gt;

&lt;h2&gt;Wrap it up&amp;hellip;&lt;/h2&gt;

&lt;p&gt;If you approach your business code as a separate entity from your Rails (or framework in general) code, you will be able to
write the code that you &lt;em&gt;want&lt;/em&gt; to write, rather than the code you&amp;rsquo;re &lt;em&gt;forced&lt;/em&gt; to write. Look for design patterns that suit
your needs and make sense in your context. I utilize a &amp;ldquo;front controller&amp;rdquo; pattern, but there are other patterns for web interfaces
that could work for you! If you&amp;rsquo;re tied to The Rails Way, you might miss these patterns and be forced into someone else&amp;rsquo;s
design choices.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Tips for Taking Twilio to Production</title>
    <link rel="alternate" href="https://stephenbussey.com/2017/09/03/tips-for-taking-twilio-to-production.html"/>
    <id>https://stephenbussey.com/2017/09/03/tips-for-taking-twilio-to-production.html</id>
    <published>2017-09-02T20:00:00-04:00</published>
    <updated>2017-09-29T15:19:43-04:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve been fortunate to work with the &lt;a href="https://www.twilio.com" target="_blank"&gt;Twilio&lt;/a&gt; API at each of my professional jobs. In fact,
I&amp;rsquo;ve often said that I&amp;rsquo;ll end up integrating with Twilio when I start my own company. The value that Twilio provides
is pretty incredible, making it possible to easily handle calls, SMS, and other telecom functionality. I&amp;rsquo;ve put
together some tips if you&amp;rsquo;re looking to use and ship Twilio Voice to your customers. Some of these tips will be development
related and others will be business requirement related that you may not consider up-front.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilize subaccounts for customer separation&lt;/li&gt;
&lt;li&gt;Fully understand billing and how to get usage for any account&lt;/li&gt;
&lt;li&gt;Provide instructional material / troubleshooting for customer environments&lt;/li&gt;
&lt;li&gt;Use ngrok to make local development a breeze&lt;/li&gt;
&lt;li&gt;Understand latency requirements of your TwiML endpoints&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Utilize subaccounts for customer separation&lt;/h2&gt;

&lt;p&gt;Twilio supports &lt;a href="https://support.twilio.com/hc/en-us/articles/223136587-What-is-a-subaccount-" target="_blank"&gt;subaccounts&lt;/a&gt; which provide
a way to separate customer environments into many mini environments. Using subaccounts will allow your phone numbers, apps,
billing, etc. to be completely separated from each other. This removes the possibility of allowing customer A to use customer B&amp;rsquo;s
phone numbers when placing calls, for instance.&lt;/p&gt;

&lt;p&gt;Aside from separation being a good practice that might save you in the case of a programming bug, the bigger reason is that Twilio&amp;rsquo;s
billing will be broken out per subaccount. While the credit card on file for the main account will be used to pay for services, the
billing and usage records can be seen per subaccount. There is no other way (short of aggregating all calls yourself) to do
this billing delineation. Even if you are able to aggregate the cost per call, there may be other charges that you cannot predict
which aren&amp;rsquo;t as easy to separate when using 1 account.&lt;/p&gt;

&lt;p&gt;When you&amp;rsquo;re using subaccounts, you can treat all API calls exactly the same, the difference is that they are made with a different
API credential. While you have to handle creation and maintenance of the subaccounts, your coding shouldn&amp;rsquo;t be much more difficult.&lt;/p&gt;

&lt;h2&gt;Fully understand billing and how to get usage for any account&lt;/h2&gt;

&lt;p&gt;On a similar note as using subaccounts for billing, get ahead of what types of charges you will accrue and why.
Twilio doesn&amp;rsquo;t provide an interface to see your costs per subaccount without viewing every single subaccount individually.
You may need to write custom code using the &lt;a href="https://www.twilio.com/docs/api/rest/usage-records" target="_blank"&gt;UsageRecord API&lt;/a&gt; which can be placed
into your database of choice and aggregated as needed in order to achieve costs per subaccount.&lt;/p&gt;

&lt;p&gt;On top of your actual bill, the usage per subaccount can be very important. Despite Twilio being awesome at fraud prevention, it
will happen that fraudsters try to target your application. They place calls through high-cost routes and siphon the money that
Twilio pays to use those routes. You can get ahead of this by setting up &lt;a href="https://www.twilio.com/docs/api/rest/usage-triggers" target="_blank"&gt;UsageTriggers&lt;/a&gt;.
Using these triggers will allow you to be alerted when certain spending thresholds are passed in Twilio.&lt;/p&gt;

&lt;p&gt;From a business perspective, I would recommend connecting with your financial team to make sure they have what they need to document
the Twilio charges correctly.&lt;/p&gt;

&lt;h2&gt;Provide instructional material / troubleshooting for customer environments&lt;/h2&gt;

&lt;p&gt;Telecom is hard, for the service providers and for your customers. Voice data requires a reliable internet and computer setup.
You will absolutely run into issues where customers are not able to use Twilio services due to issues on their end which may
not be obvious even after troubleshooting.&lt;/p&gt;

&lt;p&gt;Do research into VoIP requirements and prepare material for your own customers. Maintain your own knowledge base with up to date
resolutions based on your learnings over time. Never dismiss an issue being something very simple like a microphone not working
or a bad network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://networktest.twilio.com" target="_blank"&gt;networktest.twilio.com&lt;/a&gt; is a great resource for doing site surveys for customers. I suggest running
10 60s tests over 10 minutes and taking the minimum result as the stable network available for VoIP.&lt;/p&gt;

&lt;h2&gt;Use ngrok to make local development a breeze&lt;/h2&gt;

&lt;p&gt;This one might be clear to most people who have done Twilio development. However, I felt that I needed to include this tip as
&lt;a href="https://ngrok.io" target="_blank"&gt;ngrok&lt;/a&gt; is my #1 Twilio development tool; I wouldn&amp;rsquo;t be able to develop easily without it. ngrok provides tunnels from
the open internet to a local port on your machine. You can point ngrok to your local server and then Twilio can access it over
the internet without any firewall changes.&lt;/p&gt;

&lt;p&gt;ngrok does cost money, but I&amp;rsquo;ve gotten by on the free tier so far. It requires updating any TwiML apps when you restart ngrok,
but it will operate the same otherwise.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t just use ngrok for a simple tunnel. Make use of the local admin port (4040) to see what traffic / responses have been proxied through
your server. This is invaluable to diagnose why Twilio or your server choked on a request.&lt;/p&gt;

&lt;h2&gt;Understand latency requirements of your TwiML endpoints&lt;/h2&gt;

&lt;p&gt;Telecom is very latency sensitive. When Twilio initiates a phone call, it&amp;rsquo;s going to do at least 1 round trip to
your server, if not more depending on your setup. If your server is struggling to keep up with web requests and holds them in
a queue, you will end up dropping or delaying your phone calls.&lt;/p&gt;

&lt;p&gt;Consider placing your Twilio endpoints on dedicated servers that aren&amp;rsquo;t serving other traffic in order to avoid latency spikes
caused by other sections of your application. Also ensure that your Twilio endpoints are fast in normal use case to decrease your
time spent on each request.&lt;/p&gt;

&lt;p&gt;Most importantly, keep an eye on your throughput and performance and setup alerts for when something goes wrong.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I hope that these tips help you out with your Twilio implementation. You&amp;rsquo;re sure to learn more as you deploy your first application,
or scale an existing application, but the growing pains will be well worth it in the end.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Visual Regression Testing in Capybara</title>
    <link rel="alternate" href="https://stephenbussey.com/2016/05/07/visual-regression-testing.html"/>
    <id>https://stephenbussey.com/2016/05/07/visual-regression-testing.html</id>
    <published>2016-05-06T20:00:00-04:00</published>
    <updated>2017-09-29T15:19:43-04:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;An interesting topic that is picking up traction with many front-end UI engineers is visual regression testing. Visual regression testing relies on known visual state, which enforces that the application has not visually changed between code changes. Our QA and UI engineering team at SalesLoft recently began to discuss their desire to try this out; I want to share our first iteration.&lt;/p&gt;

&lt;h2&gt;Visual Regression Test Requirements&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve put together a conservative list of requirements for visual testing that came to my mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual state is accessible to everyone with code access&lt;/li&gt;
&lt;li&gt;Visual state history is tracked and managed&lt;/li&gt;
&lt;li&gt;Any engineer can update the known visual state, documenting the previous and new state&lt;/li&gt;
&lt;li&gt;Changes in an unrelated part of the screen won&amp;rsquo;t fail tests&lt;/li&gt;
&lt;li&gt;Changes in the related part of the screen will fail tests&lt;/li&gt;
&lt;li&gt;Failures should record with a visual diff indicating what failed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many of these requirements are satisfied by some form of VCS, git for us at SalesLoft. The rest must be implemented in code.&lt;/p&gt;

&lt;h2&gt;Capybara&lt;/h2&gt;

&lt;p&gt;Capybara is the perfect tool for QA teams. Tests can be written against the entire stack and re-run in a predictable manner. There is a bit of leg-work here, and the speed of them makes Capybara undesirable for normal CI processes. However, having Capybara setup makes the screenshot diff process near trivial, due to the &lt;code&gt;page.save_screenshot&lt;/code&gt; method that Capybara exposes.&lt;/p&gt;

&lt;p&gt;Setting up Capybara is beyond the scope of this post, so I&amp;rsquo;ll assume that you are at the point where &lt;code&gt;page.save_screenshot&lt;/code&gt; works for you, and your tests are runnable.&lt;/p&gt;

&lt;h2&gt;Screenshot Process&lt;/h2&gt;

&lt;p&gt;Taking a screenshot with &lt;code&gt;page.save_screenshot&lt;/code&gt; works well, but misses the requirement of unrelated screen changes failing tests. The current way that I get around this is by cropping the screenshot to the dimensions of a unique selector on the page.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;image = page.save_screenshot(image_path)
cropped_image = Magick::Image.read(image)[0].crop(
  location.x - padding/2,
  location.y - padding/2,
  size.width + padding,
  size.height + padding
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The padding allows for a little bit of context on the page (where is this element?), but could be removed to have the exact dimensions of the element.&lt;/p&gt;

&lt;h2&gt;ImageMagick (RMagick)&lt;/h2&gt;

&lt;p&gt;ImageMagick provides a great image comparison algorithm which will provide the number of pixels changed and an image containing all changed components in bright red. It&amp;rsquo;s also perceptively fast for what it is doing.&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;diff_image, pixels_changed = existing_image.
  compare_channel(image, Magick::AbsoluteErrorMetric)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Putting it Together&lt;/h2&gt;

&lt;p&gt;Putting together screenshot and diff capabilities gives everything needed to write visual regression tests. The interface that I&amp;rsquo;ve been working for now looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="ruby"&gt;ensure_pixel_perfection.
  of(&amp;quot;some visual element&amp;quot;).
  using(&amp;quot;#my-unique-selector&amp;quot;).
  retina.
  call
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will provide a file called fixtures/some-visual-element.png which gets created when the file doesn&amp;rsquo;t exist, and diff&amp;rsquo;d when it does exist. We commit this file to git and then update it when things change.&lt;/p&gt;

&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/2000/1*WrEbDSd5kJpgljHrJ9x-7g.png" class="alignnone" /&gt;
&lt;em&gt;A visual diff from SalesLoft Cadence where “Edit a Template” has been changed to “Create a Template”&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;The Code&lt;/h2&gt;

&lt;p&gt;I can&amp;rsquo;t promise support for your codebase, so I have chosen to not gemify this code. I&amp;rsquo;ve put it up as a &lt;a href="https://gist.github.com/sb8244/55246c51e469524f2abd0c17dd3c574e" target="_blank"&gt;gist&lt;/a&gt; instead. Note that this requires Rails, Capybara, and RMagick gems. You could adapt it to not be Rails dependent, if you are on something else.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Exceptional Starts with a Choice</title>
    <link rel="alternate" href="https://stephenbussey.com/2015/12/03/exceptional-starts-with-a-choice.html"/>
    <id>https://stephenbussey.com/2015/12/03/exceptional-starts-with-a-choice.html</id>
    <published>2015-12-02T19:00:00-05:00</published>
    <updated>2017-09-29T15:19:43-04:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;&lt;em&gt;Exceptional has been added as a core value at SalesLoft; I have been thinking about what it means and how it can be achieved. I thoroughly believe that anyone can be exceptional through deliberate action and self reflection.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exceptionalism is not good, okay, or average.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s easy to get sucked into the allure of skimming by as average. Exceptional people strive for more than this; they seek to be at the top of their craft.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exceptionalism is not a gift, talent or easy. It is a choice, an attitude, and possible to achieve.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Anyone can be exceptional by making the choice to go above and beyond in whatever they do. As such, exceptionalism involves two components, knowledge of the task, and mindset. Take for example a star athlete: an athlete possesses a natural affinity, but became a star through the mindset to practice and garner intimate knowledge of their game.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exceptionalism isn&amp;rsquo;t permanent, it must be maintained by paying attention to actions and goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s possible to make the choice to not be exceptional. Even the most exceptional people can lose sight of their drive and must be vigilant to keep focus by continuing to practice and learn.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exceptional is relative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exceptional requires a baseline, average. On this note, not everyone can be labeled exceptional. What does this mean in the workplace where one strives to be around only exceptional people? While everyone at the job might be exceptional relative to the industry or population, they can&amp;rsquo;t all be exceptional to each other. &lt;em&gt;I don&amp;rsquo;t think that this is a bad thing, as I see it as a chance to learn and grow.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Exceptional starts with a choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;I&amp;rsquo;ve already said this, but it&amp;rsquo;s worth a final note.&lt;/em&gt; Being exceptional is a choice that can be made. It isn&amp;rsquo;t instant and requires hard work and motivation, but it is possible. Starting each day with the &lt;a href="https://en.wikipedia.org/wiki/Intentional_living" target="_blank"&gt;intention&lt;/a&gt; to be exceptional will eventually pay off.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Identifying and Fixing Web Application Performance Problems</title>
    <link rel="alternate" href="https://stephenbussey.com/2015/11/10/performance-fixes.html"/>
    <id>https://stephenbussey.com/2015/11/10/performance-fixes.html</id>
    <published>2015-11-09T19:00:00-05:00</published>
    <updated>2017-09-29T15:19:43-04:00</updated>
    <author>
      <name>Stephen Bussey</name>
    </author>
    <content type="html">&lt;p&gt;Identifying performance problems; it is a daunting task given to many software engineers who are working on scaling up applications. As requests increase in frequency from hundreds, thousands, tens of thousands per minute, being able to locate performance bottle necks and then fix them in crucial for long-term success. While not every application will scale in the same way, I&amp;rsquo;ve thought about tips that will hopefully help many engineers facing the same problems that I am facing.&lt;/p&gt;

&lt;h2&gt;Locating the Areas to Improve&lt;/h2&gt;

&lt;p&gt;An application has hundreds of endpoints and a ton of code, how can one possibly know where to start looking for performance gains? Through tools like New Relic, I can identify low performers to the Apdex and average request time.&lt;/p&gt;

&lt;p&gt;My favorite view in New Relic is the &amp;ldquo;Apdex most dissatisfying&amp;rdquo; view under transactions. Through this view, I am able to see requests which most disatisfy the user base. However, I  focus on transactions with moderate to high throughput to see the most gain. We&amp;rsquo;ve recently lowered our t-threshold from 0.50 (default) to 0.04 (aggressive). By doing this, we have set a high performance bar that allows for better feedback through the apdex.&lt;/p&gt;

&lt;p&gt;Another great view is the simple &amp;ldquo;databases&amp;rdquo; tab. By knowing the load on the database, and equating that to usage, I can understand which transactions are heavy hitters, and how their throughput affects the database. Also, if memcache or redis usage is ballooning, it is an indicator that there may be caching in an incorrect place.&lt;/p&gt;

&lt;p&gt;After identifying transactions that are candidates for improvement, I follow a few sets of rules, and then explore fringe cases that don&amp;rsquo;t fall into them on a case-by-case basis.&lt;/p&gt;

&lt;h2&gt;Assume it is the Database&lt;/h2&gt;

&lt;p&gt;Databases do a ton of work, and there is a good chance that applications are using them in a way that reduces their maximum throughput. Although there are many types of database issues, two that are most seen by me are &lt;strong&gt;n+1 queries&lt;/strong&gt; and &lt;strong&gt;missing indices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;n+1 queries&lt;/strong&gt; are pesky occurences where an application is requesting information from the database in an iteration that could have been loaded by the database in a single query outside of the iteration. This topic has been hit pretty heavily, but one new contribution I can add is that a query doesn&amp;rsquo;t have to hit the database to be a performance deficit. In Rails, the active record cache can save a database call at the expense of fully loading Arel objects. I use Rails panel to identify &amp;ldquo;cached queries&amp;rdquo; and try to remove them in as many cases as possible. I&amp;rsquo;ve seen performance gains as drastic as 10+ seconds just from cached queries that don&amp;rsquo;t even hit the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Missing indices&lt;/strong&gt; is a very common database issue that is exactly as it sounds. Outside of the usual index suspects, Postgres offers partial index which can be a huge performance gain in certain situations. Take for instance this edited filtered scan explanation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Limit  (cost=0.00..88.80 rows=1 width=493) (actual time=0.387..0.387 rows=0 loops=1)
Index Scan using index_name on my_table  (cost=0.56..12.60 rows=1 width=430) (actual time=0.106..0.106 rows=1 loops=1)
         Index Cond: (some_text_field = &amp;#39;some value&amp;#39;::text)
         Filter: (team_id = 1 AND NOT deleted)
        Rows Removed by Filter: 1720
Total runtime: 0.406 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is good that this is hitting an index, but do you notice the filter conditional on a constant value? By taking advantage of a partial index &lt;code&gt;WHERE NOT deleted&lt;/code&gt;, huge performance gains can be realized:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Limit  (cost=0.28..8.30 rows=1 width=493) (actual time=0.038..0.038 rows=0 loops=1)
  -&amp;gt;  Index Scan using index_name on my_table  (cost=0.28..8.30 rows=1 width=493) (actual time=0.038..0.038 rows=0 loops=1)
        Index Cond: (some_text_field = &amp;#39;some value&amp;#39;::text)
        Filter: (team_id = 1)
Total runtime: 0.065 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are tons of small tricks like this that are picked up through interacting with &lt;code&gt;EXPLAIN ANALYZE&lt;/code&gt;. I encourage people looking to learn to dig into troublesome queries and really taking the time to understand the debug output. I&amp;rsquo;ve found some queries that can go from 15s down to .01ms just from partial indices.&lt;/p&gt;

&lt;h2&gt;Look for Sequences of Code to Memoize&lt;/h2&gt;

&lt;p&gt;Memoization is a hot topic in the Ruby world. I personally reach for &lt;code&gt;@method_name ||= the content&lt;/code&gt; and stick to one line methods whenever possible. However, it is possible to cache &lt;code&gt;begin ; end&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt; statements in Ruby.&lt;/p&gt;

&lt;p&gt;When a request is being executed, most memory is going to be specific for that request. A decision can be made of &amp;ldquo;if this count is 1 at the beginning of the request and 2 at the end, does that matter?&amp;rdquo;. If the answer is no (it usually is), then one can memoize the count method to store the result in memory. This is how n+1 queries can be removed.&lt;/p&gt;

&lt;h2&gt;Discover the Context of Code&lt;/h2&gt;

&lt;p&gt;A continuation of memoization is truly understanding the context that code will be executing in. In order to make decisions like memoization, one must be cognizant of the usage of that code elsewhere in the codebase. For instance, will the method be used in the foreground, background, once a second, 100 times per second, etc. Code has to work and be performant in all contexts, and the only way to do this is fully understand it. It is the job of a software engineer to discover this context.&lt;/p&gt;

&lt;p&gt;One example of how drastic context can be is a class which caches a value in memcache (off box). If the code is executing in a background job 1 at a time, then the cache is necessary to prevent recalculation between runs. However, if the code is executing inside of an iteration of a single run, then cache could be avoided in exchange for memory. Finding instances where application code can be moved from off-box to in-memory will speed it up significantly.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t usually end my posts with conclusions, but it is important to re-iterate that performance optimization is an open book where one solution won&amp;rsquo;t be the end all. I&amp;rsquo;ve learned something new almost every time I&amp;rsquo;ve went in for speed improvements, and I come out happy every single time. Give it a shot and let me know if you find any cool techniques!&lt;/p&gt;
</content>
  </entry>
</feed>
